generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Map {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  options     Json           @default("{}")
  projections Projection[]
  tools       ToolsOnMaps[]
  layers      LayersOnMaps[]
  groups      GroupsOnMaps[]
}

model Tool {
  id      Int           @id @default(autoincrement())
  type    String
  options Json          @default("{}")
  maps    ToolsOnMaps[]
}

model ToolsOnMaps {
  id      Int    @id
  mapName String
  toolId  Int
  /// Determines the sort between tools
  index   Int    @default(0)
  /// Allows overridding default tool options (set in Tool) on a per-map basis
  options Json   @default("{}")
  map     Map    @relation(fields: [mapName], references: [name])
  tool    Tool   @relation(fields: [toolId], references: [id])
}

model Projection {
  id         Int       @id @default(autoincrement())
  code       String    @unique
  definition String
  extent     Decimal[]
  units      String?
  maps       Map[]
}

model Group {
  id          String           @id @default(cuid())
  name        String
  caption     String
  groups      Group[]          @relation("GroupHasGroups")
  parentGroup Group[]          @relation("GroupHasGroups")
  layers      LayersOnGroups[]
  maps        GroupsOnMaps[]
}

model Layer {
  id      String           @id @default(cuid())
  type    LayerType
  options Json             @default("{}")
  maps    LayersOnMaps[]
  groups  LayersOnGroups[]
}

model LayersOnGroups {
  id      Int     @id @default(autoincrement())
  groupId String
  layerId String
  group   Group   @relation(fields: [groupId], references: [id])
  layer   Layer   @relation(fields: [layerId], references: [id])
  usage   UseType
  options Json    @default("{}")
}

model GroupsOnMaps {
  id      Int     @id @default(autoincrement())
  mapName String
  groupId String
  map     Map     @relation(fields: [mapName], references: [name])
  group   Group   @relation(fields: [groupId], references: [id])
  usage   UseType
  options Json    @default("{}")
}

model LayersOnMaps {
  id      Int     @id @default(autoincrement())
  mapName String
  layerId String
  map     Map     @relation(fields: [mapName], references: [name])
  layer   Layer   @relation(fields: [layerId], references: [id])
  usage   UseType
  options Json    @default("{}")
}

enum LayerType {
  ARCGIS
  VECTOR
  WFS
  WFST
  WMS
  WMTS
}

enum UseType {
  BACKGROUND
  FOREGROUND
}
